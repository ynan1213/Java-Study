############################# rabbit数据源配置 ###################################
# 如果 spring.cloud.stream.binders.xxx下面没有配置environment.spring.rabbitmq.host、port、username、password
# 就会读取这里的，相当于spring整合rabbit的全局配置（看源码：发现是如果binder.environment下面为空，则会在创建子容器的时候会将父容器设置进去，否则不设置）
spring.rabbitmq.addresses=47.100.24.106
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=123456
spring.rabbitmq.virtual-host=my_vhost

# 除了这种方式配置，还有下面的 spring.cloud.stream.rocketmq.binder.name-server
#rocketmq.name-server=47.100.24.106:9876
#rocketmq.producer.group=xxx
############################# binder配置 ###################################
# 配置Binder，spring-cloud-stream-binder-rabbit依赖会自动导入name=rabbit的binder
# 如果想自定义多个binder，如下配置
#   ①：type类型是必须指定的，指向spring.binders文件中存在的key值
spring.cloud.stream.binders.xxx-binder1.type=rabbit
#   ②：如果配置为true(默认就为true)，当bindings未指定binder的时候就会读取到这里
spring.cloud.stream.binders.xxx-binder1.default-candidate=false
#   ③：是否继承应用程序的环境配置（就是上面的spring.rabbitmq.address...）默认为true
spring.cloud.stream.binders.xxx-binder1.inherit-environment=false

spring.cloud.stream.binders.xxx-binder2.type=rocketmq
# 上面自定义的binder已经为true的情况下，这里就不能再配置为true了，否则就有两个候选，无法区分的情况下就会抛异常
spring.cloud.stream.binders.xxx-binder2.default-candidate=true
# 下面这样为rocketmq配置namesrv是不会生效的。有两种方式：①：上面的 rocketmq.name-server=47.100.24.106:9876
#spring.cloud.stream.binders.xxx-binder2.environment.name-server=47.100.24.106:9876

spring.cloud.stream.rocketmq.binder.name-server=47.100.24.106:9876
spring.cloud.stream.rocketmq.binder.access-key=
spring.cloud.stream.rocketmq.binder.secret-key=
spring.cloud.stream.rocketmq.binder.enable-msg-trace=false
spring.cloud.stream.rocketmq.binder.customized-trace-topic=

# 上面自定义了多个binder，bindings如何指定使用哪一个呢？
# 方式一：全局指定，这里应该配置xxx-binder1或者xxx-binder2
spring.cloud.stream.defaultBinder=xxx-binder2
# 方式二：在每个 bindings 上指定binder
# spring.cloud.stream.bindings.xxx-binder1.binder=kafka
# spring.cloud.stream.bindings.xxx-binder2.binder=rabbit

############################# bindings配置:output ###################################
#   ①：如果不配置destination，默认就取@Input或者@Output注解的value值或者是方法名，这里就是 xxx-output
#      在rabbit中，这个值就是exchange的名称，在rocketmq中这个值就是 topic
spring.cloud.stream.bindings.xxx-output.destination=Exchanges-yuan
#   ②：如果不配置content-type，默认是application/json
spring.cloud.stream.bindings.xxx-output.content-type=application/json
#   ③：如果这里不指定binder，会取全局默认的spring.cloud.stream.defaultBinder，如果也未配置，取default-candidate=true的，有多个的话会抛异常
#spring.cloud.stream.bindings.xxx-output.binder=

# 这些配置会绑定到 ExtendedProducerProperties 对象中
#   ①：默认值false
spring.cloud.stream.bindings.xxx-output.producer.error-channel-enabled=true
#spring.cloud.stream.bindings.xxx-output.producer.partition-count=13

# 下面的这些配置会被绑定到 ExtendedProducerProperties 中的  T extension对象中，在 rocketmq 的实现是 RocketMQProducerProperties
# 生产者groupName，如果未配置，会取 destination 作为 groupName，group的作用？
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.group=stream-group
# 发送超时，默认 3000
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.send-message-timeout=4444
# 同步重试次数：默认2
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.retry-times-when-send-failed=4
# 异步重试次数：默认2
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.retry-times-when-send-async-failed=4
# 默认为true，如果改成了false，在binder的时候会抛异常：Binding for channel destination has been disabled, message can't be delivered
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.enabled=true
# 是否开启事务，默认false
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.transactional=false
# 默认为true
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.vip-channel-enabled=true
# 默认 1024 * 4
#spring.cloud.stream.rocketmq.bindings.xxx-output.producer.compress-message-body-threshold=1024 * 5
# 默认 false
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.retry-next-server=true
# 默认 1024 * 1024 * 4
#spring.cloud.stream.rocketmq.bindings.xxx-output.producer.max-message-size=1024 * 1024 * 4
# 发送方式 ？？？ 默认false
spring.cloud.stream.rocketmq.bindings.xxx-output.producer.sync=true


############################# bindings配置:input ###################################
# ①：多个用逗号分隔
spring.cloud.stream.bindings.xxx-input.destination=Exchanges-yuan
spring.cloud.stream.bindings.xxx-input.group=xxx-group

# 这些配置会绑定到 ExtendedConsumerProperties 对象
#   ①：默认值false
#spring.cloud.stream.bindings.xxx-input.consumer.multiplex=false
#   ②：默认false，当group为空的时候，如果这里配置了true，会报错
#spring.cloud.stream.bindings.xxx-input.consumer.partitioned=false

# 该参数最终会被设置到consumer中，最终是被设置到线程池的最小和最大数量
# consumer.setConsumeThreadMax(rocketMQConsumerProperties.getConcurrency());
# consumer.setConsumeThreadMin(rocketMQConsumerProperties.getConcurrency());
spring.cloud.stream.bindings.xxx-input.consumer.concurrency=4

# 是否顺序消费，默认false
spring.cloud.stream.rocketmq.bindings.xxx-input.consumer.orderly=true
spring.cloud.stream.rocketmq.bindings.xxx-input.consumer.tags=*
# 是否广播，默认false
spring.cloud.stream.rocketmq.bindings.xxx-input.consumer.broadcasting=false